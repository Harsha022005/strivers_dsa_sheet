class Solution:
    
    #Function to return a list containing the union of the two arrays.
    def findUnion(self,a,b):
        # code here 
        li=[]
        i,j=0,0
        while i<len(a) and j<len(b):
            if a[i]==b[j]:
                if len(li)==0 or li[-1]!=a[i]:
                    li.append(a[i])
                i+=1
                j+=1
            elif a[i]<b[j]:
                if len(li)==0 or li[-1]!=a[i]:
                    li.append(a[i])
                i+=1
            else:
                if len(li)==0 or li[-1]!=b[j]:
                    li.append(b[j])
                j+=1
        while i<len(a):
            if len(li)==0 or li[-1]!=a[i]:
                li.append(a[i])
            i+=1
        while j<len(b):
            if len(li)==0 or li[-1]!=b[j]:
                li.append(b[j])
            j+=1
        return li    


### **Summary:**
The function **`findUnion`** returns the **union** of two sorted arrays **`a`** and **`b`** while maintaining the sorted order and ensuring no duplicates.

### **Explanation:**
- **Two pointers** (`i` for `a` and `j` for `b`) are used to traverse both arrays.
- If **both elements are equal**, add the element to the result **only if it's not already present**, then increment both pointers.
- If **`a[i]` is smaller**, add it to the result **if not already present**, then increment `i`.
- If **`b[j]` is smaller**, add it to the result **if not already present**, then increment `j`.
- After finishing one array, process the **remaining elements** of the other array, ensuring **no duplicates**.
- Finally, return the **sorted union list**.

### **Time Complexity:**  
- **O(N + M)** (where N and M are the lengths of `a` and `b`).
- Efficient due to **two-pointer approach** instead of using sets.

### **Space Complexity:**  
- **O(N + M)** (for storing the result).
