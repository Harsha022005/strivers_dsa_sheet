def getLongestSubarray(a: [int], k: int) -> int:
    n = len(a)
    left, right = 0, 0 
    Sum = a[0]
    maxLen = 0
    while right < n:
        while left <= right and Sum > k:
            Sum -= a[left]
            left += 1

        if Sum == k:
            maxLen = max(maxLen, right - left + 1)

        right += 1
        if right < n: Sum += a[right]

    return maxLen

NOTE: This approach will not work for an array containing negative elements.  
This is because when we slide the window dynamically, the left pointer moves to the right to reduce the sum.  
However, this method assumes that removing elements always decreases the sum, which is only true for non-negative numbers.  
If the target sum (K) is negative or the array contains negative numbers, removing elements may unexpectedly increase the sum, causing valid subarrays to be discarded.  
Thus, this method is only reliable for arrays with non-negative numbers.
So use prefixmap approach..

